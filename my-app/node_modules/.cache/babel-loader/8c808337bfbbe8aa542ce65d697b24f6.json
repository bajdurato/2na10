{"ast":null,"code":"import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport thunkMiddlware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport movieBrowserReducer from './modules/movie-browser/movie-browser.reducers'; // The root reducer will serve as the parent for all other reducers\n// We will add our module reducers to the root level here\n\nconst rootReducer = combineReducers({\n  movieBrowser: movieBrowserReducer\n}); // 1. Actions Creators are dispatched to the store\n// 2. Stores call the action creator e.g.\n// Will log information about dispatched actions to the console\n// including the previous state, the action details, and the next state\n\nconst loggerMiddleware = createLogger();\nconst store = createStore( // reducer\nrootReducer, // preloadedState\nundefined, // compose simply enables us to apply several store enhancers\n// Right now, we are only using applyMiddlware, so this is\n// just future-proofing our application\ncompose( // Middlware can intercept dispatched actions before they reach the reducer\n// in order to modify it in some way\napplyMiddleware( // Thunk allows functions to be returned from action creators\n// so we can do things like dispatch multiple actions in a \n// single action creator for async actions\nthunkMiddlware, // logger will output the previous state, next state, and the\n// the action details to the console\nloggerMiddleware)));\nexport default store;","map":{"version":3,"sources":["D:\\Programowanie\\CodersCamp\\dwana10\\2na10\\my-app\\src\\store.js"],"names":["createStore","combineReducers","compose","applyMiddleware","thunkMiddlware","createLogger","movieBrowserReducer","rootReducer","movieBrowser","loggerMiddleware","store","undefined"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAOC,cAAP,MAA2B,aAA3B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,mBAAP,MAAgC,gDAAhC,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGN,eAAe,CAAC;AAClCO,EAAAA,YAAY,EAAEF;AADoB,CAAD,CAAnC,C,CAGA;AACA;AAEA;AACA;;AACA,MAAMG,gBAAgB,GAAGJ,YAAY,EAArC;AAEA,MAAMK,KAAK,GAAGV,WAAW,EACvB;AACAO,WAFuB,EAGvB;AACAI,SAJuB,EAKvB;AACA;AACA;AACAT,OAAO,EACL;AACA;AACAC,eAAe,EACb;AACA;AACA;AACAC,cAJa,EAKb;AACA;AACAK,gBAPa,CAHV,CARgB,CAAzB;AAuBA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport thunkMiddlware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger'\r\nimport movieBrowserReducer from './modules/movie-browser/movie-browser.reducers';\r\n\r\n// The root reducer will serve as the parent for all other reducers\r\n// We will add our module reducers to the root level here\r\nconst rootReducer = combineReducers({\r\n  movieBrowser: movieBrowserReducer\r\n});\r\n// 1. Actions Creators are dispatched to the store\r\n// 2. Stores call the action creator e.g.\r\n \r\n// Will log information about dispatched actions to the console\r\n// including the previous state, the action details, and the next state\r\nconst loggerMiddleware = createLogger();\r\n\r\nconst store = createStore(\r\n  // reducer\r\n  rootReducer,\r\n  // preloadedState\r\n  undefined,\r\n  // compose simply enables us to apply several store enhancers\r\n  // Right now, we are only using applyMiddlware, so this is\r\n  // just future-proofing our application\r\n  compose(\r\n    // Middlware can intercept dispatched actions before they reach the reducer\r\n    // in order to modify it in some way\r\n    applyMiddleware(\r\n      // Thunk allows functions to be returned from action creators\r\n      // so we can do things like dispatch multiple actions in a \r\n      // single action creator for async actions\r\n      thunkMiddlware,\r\n      // logger will output the previous state, next state, and the\r\n      // the action details to the console\r\n      loggerMiddleware\r\n    )\r\n  )\r\n);\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}