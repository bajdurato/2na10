{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { cloneElement } from 'react';\nimport uncontrollable from 'uncontrollable';\nimport { bsClass, getClassSet, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport ValidComponentChildren from './utils/ValidComponentChildren';\nimport { generatedId } from './utils/PropTypes';\nvar propTypes = {\n  accordion: PropTypes.bool,\n\n  /**\r\n   * When `accordion` is enabled, `activeKey` controls the which child `Panel` is expanded. `activeKey` should\r\n   * match a child Panel `eventKey` prop exactly.\r\n   *\r\n   * @controllable onSelect\r\n   */\n  activeKey: PropTypes.any,\n\n  /**\r\n   * A callback fired when a child Panel collapse state changes. It's called with the next expanded `activeKey`\r\n   *\r\n   * @controllable activeKey\r\n   */\n  onSelect: PropTypes.func,\n\n  /**\r\n   * An HTML role attribute\r\n   */\n  role: PropTypes.string,\n\n  /**\r\n   * A function that takes an eventKey and type and returns a\r\n   * unique id for each Panel heading and Panel Collapse. The function _must_ be a pure function,\r\n   * meaning it should always return the _same_ id for the same set of inputs. The default\r\n   * value requires that an `id` to be set for the PanelGroup.\r\n   *\r\n   * The `type` argument will either be `\"body\"` or `\"heading\"`.\r\n   *\r\n   * @defaultValue (eventKey, type) => `${this.props.id}-${type}-${key}`\r\n   */\n  generateChildId: PropTypes.func,\n\n  /**\r\n   * HTML id attribute, required if no `generateChildId` prop\r\n   * is specified.\r\n   */\n  id: generatedId('PanelGroup')\n};\nvar defaultProps = {\n  accordion: false\n};\nvar childContextTypes = {\n  $bs_panelGroup: PropTypes.shape({\n    getId: PropTypes.func,\n    headerRole: PropTypes.string,\n    panelRole: PropTypes.string,\n    activeKey: PropTypes.any,\n    onToggle: PropTypes.func\n  })\n};\n\nvar PanelGroup = function (_React$Component) {\n  _inherits(PanelGroup, _React$Component);\n\n  function PanelGroup(props, context) {\n    _classCallCheck(this, PanelGroup);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.handleSelect = _this.handleSelect.bind(_this);\n    return _this;\n  }\n\n  PanelGroup.prototype.getChildContext = function getChildContext() {\n    var _props = this.props,\n        activeKey = _props.activeKey,\n        accordion = _props.accordion,\n        generateChildId = _props.generateChildId,\n        id = _props.id;\n    var getId = null;\n\n    if (accordion) {\n      getId = generateChildId || function (key, type) {\n        return id ? id + '-' + type + '-' + key : null;\n      };\n    }\n\n    return {\n      $bs_panelGroup: _extends({\n        getId: getId,\n        headerRole: 'tab',\n        panelRole: 'tabpanel'\n      }, accordion && {\n        activeKey: activeKey,\n        onToggle: this.handleSelect\n      })\n    };\n  };\n\n  PanelGroup.prototype.handleSelect = function handleSelect(key, expanded, e) {\n    if (expanded) {\n      this.props.onSelect(key, e);\n    }\n  };\n\n  PanelGroup.prototype.render = function render() {\n    var _props2 = this.props,\n        accordion = _props2.accordion,\n        className = _props2.className,\n        children = _props2.children,\n        props = _objectWithoutProperties(_props2, ['accordion', 'className', 'children']);\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['onSelect', 'activeKey']),\n        bsProps = _splitBsPropsAndOmit[0],\n        elementProps = _splitBsPropsAndOmit[1];\n\n    if (accordion) {\n      elementProps.role = elementProps.role || 'tablist';\n    }\n\n    var classes = getClassSet(bsProps);\n    return React.createElement('div', _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), ValidComponentChildren.map(children, function (child) {\n      return cloneElement(child, {\n        bsStyle: child.props.bsStyle || bsProps.bsStyle\n      });\n    }));\n  };\n\n  return PanelGroup;\n}(React.Component);\n\nPanelGroup.propTypes = propTypes;\nPanelGroup.defaultProps = defaultProps;\nPanelGroup.childContextTypes = childContextTypes;\nexport default uncontrollable(bsClass('panel-group', PanelGroup), {\n  activeKey: 'onSelect'\n});","map":null,"metadata":{},"sourceType":"module"}