{"ast":null,"code":"import _Object$assign from 'babel-runtime/core-js/object/assign';\nimport _Object$values from 'babel-runtime/core-js/object/values';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport uncontrollable from 'uncontrollable';\nimport { bsStyles, bsClass, getClassSet, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport { State, Style } from './utils/StyleConfig';\nimport Body from './PanelBody';\nimport Heading from './PanelHeading';\nimport Title from './PanelTitle';\nimport Footer from './PanelFooter';\nimport Toggle from './PanelToggle';\nimport Collapse from './PanelCollapse';\n\nvar defaultGetId = function defaultGetId(id, type) {\n  return id ? id + '--' + type : null;\n};\n\nvar propTypes = {\n  /**\n   * Controls the collapsed/expanded state ofthe Panel. Requires\n   * a `Panel.Collapse` or `<Panel.Body collapsible>` child component\n   * in order to actually animate out or in.\n   *\n   * @controllable onToggle\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * A callback fired when the collapse state changes.\n   *\n   * @controllable expanded\n   */\n  onToggle: PropTypes.func,\n  eventKey: PropTypes.any,\n\n  /**\n   * An HTML `id` attribute uniquely identifying the Panel component.\n   */\n  id: PropTypes.string\n};\nvar contextTypes = {\n  $bs_panelGroup: PropTypes.shape({\n    getId: PropTypes.func,\n    activeKey: PropTypes.any,\n    onToggle: PropTypes.func\n  })\n};\nvar childContextTypes = {\n  $bs_panel: PropTypes.shape({\n    headingId: PropTypes.string,\n    bodyId: PropTypes.string,\n    bsClass: PropTypes.string,\n    onToggle: PropTypes.func,\n    expanded: PropTypes.bool\n  })\n};\n\nvar Panel = function (_React$Component) {\n  _inherits(Panel, _React$Component);\n\n  function Panel() {\n    _classCallCheck(this, Panel);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args)));\n\n    _this.handleToggle = _this.handleToggle.bind(_this);\n    return _this;\n  }\n\n  Panel.prototype.getChildContext = function getChildContext() {\n    var _props = this.props,\n        eventKey = _props.eventKey,\n        id = _props.id;\n\n    var _ref = this.context.$bs_panelGroup || {},\n        getId = _ref.getId;\n\n    var ids = void 0;\n    var idKey = eventKey == null ? id : eventKey;\n\n    if (idKey !== null) {\n      getId = getId || defaultGetId;\n      ids = {\n        headingId: getId(idKey, 'heading'),\n        bodyId: getId(idKey, 'body')\n      };\n    }\n\n    return {\n      $bs_panel: _extends({}, ids, {\n        bsClass: this.props.bsClass,\n        expanded: this.getExpanded(),\n        onToggle: this.handleToggle\n      })\n    };\n  };\n\n  Panel.prototype.getExpanded = function getExpanded() {\n    var eventKey = this.props.eventKey;\n\n    var _ref2 = this.context.$bs_panelGroup || {},\n        activeKey = _ref2.activeKey;\n\n    return this.props.expanded != null || activeKey === undefined ? this.props.expanded : activeKey === eventKey;\n  };\n\n  Panel.prototype.handleToggle = function handleToggle(e) {\n    var _ref3 = this.context.$bs_panelGroup || {},\n        onToggle = _ref3.onToggle;\n\n    var expanded = !this.getExpanded();\n    this.props.onToggle(expanded, e);\n\n    if (onToggle) {\n      onToggle(this.props.eventKey, expanded, e);\n    }\n  };\n\n  Panel.prototype.render = function render() {\n    var _props2 = this.props,\n        className = _props2.className,\n        children = _props2.children;\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(this.props, ['onToggle', 'eventKey', 'expanded']),\n        bsProps = _splitBsPropsAndOmit[0],\n        props = _splitBsPropsAndOmit[1];\n\n    return React.createElement('div', _extends({}, props, {\n      className: classNames(className, getClassSet(bsProps))\n    }), children);\n  };\n\n  return Panel;\n}(React.Component);\n\nPanel.propTypes = propTypes;\nPanel.contextTypes = contextTypes;\nPanel.childContextTypes = childContextTypes;\nvar UncontrolledPanel = uncontrollable(bsClass('panel', bsStyles([].concat(_Object$values(State), [Style.DEFAULT, Style.PRIMARY]), Style.DEFAULT, Panel)), {\n  expanded: 'onToggle'\n});\n\n_Object$assign(UncontrolledPanel, {\n  Heading: Heading,\n  Title: Title,\n  Body: Body,\n  Footer: Footer,\n  Toggle: Toggle,\n  Collapse: Collapse\n});\n\nexport default UncontrolledPanel;","map":null,"metadata":{},"sourceType":"module"}