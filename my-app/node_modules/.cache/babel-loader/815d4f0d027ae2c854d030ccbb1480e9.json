{"ast":null,"code":"import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport thunkMiddlware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport movieBrowserReducer from './modules/movie-browser/movie-browser.reducers'; // The root reducer will serve as the parent for all other reducers\n// We will add our module reducers to the root level here\n\nconst rootReducer = combineReducers({\n  movieBrowser: movieBrowserReducer\n}); // Will log information about dispatched actions to the console\n// including the previous state, the action details, and the next state\n\nconst loggerMiddleware = createLogger();\nconst store = createStore( // reducer\nrootReducer, // preloadedState\nundefined, // compose simply enables us to apply several store enhancers\n// Right now, we are only using applyMiddlware, so this is\n// just future-proofing our application\ncompose( // Middlware can intercept dispatched actions before they reach the reducer\n// in order to modify it in some way\napplyMiddleware( // Thunk allows functions to be returned from action creators\n// so we can do things like dispatch multiple actions in a \n// single action creator for async actions\nthunkMiddlware, // logger will output the previous state, next state, and\n// the action details to the console\nloggerMiddleware)));\nexport default store;","map":{"version":3,"sources":["C:\\Users\\bajdu\\Documents\\2na10\\my-app\\src\\store.js"],"names":["createStore","combineReducers","compose","applyMiddleware","thunkMiddlware","createLogger","movieBrowserReducer","rootReducer","movieBrowser","loggerMiddleware","store","undefined"],"mappings":"AAAA,SACIA,WADJ,EAEIC,eAFJ,EAGIC,OAHJ,EAIIC,eAJJ,QAKO,OALP;AAMA,OAAOC,cAAP,MAA2B,aAA3B;AACA,SACIC,YADJ,QAEO,cAFP;AAGA,OAAOC,mBAAP,MAAgC,gDAAhC,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGN,eAAe,CAAC;AAChCO,EAAAA,YAAY,EAAEF;AADkB,CAAD,CAAnC,C,CAIA;AACA;;AACA,MAAMG,gBAAgB,GAAGJ,YAAY,EAArC;AAEA,MAAMK,KAAK,GAAGV,WAAW,EACrB;AACAO,WAFqB,EAGrB;AACAI,SAJqB,EAKrB;AACA;AACA;AACAT,OAAO,EACH;AACA;AACAC,eAAe,EACX;AACA;AACA;AACAC,cAJW,EAKX;AACA;AACAK,gBAPW,CAHZ,CARc,CAAzB;AAuBA,eAAeC,KAAf","sourcesContent":["import {\r\n    createStore,\r\n    combineReducers,\r\n    compose,\r\n    applyMiddleware\r\n} from 'redux';\r\nimport thunkMiddlware from 'redux-thunk';\r\nimport {\r\n    createLogger\r\n} from 'redux-logger'\r\nimport movieBrowserReducer from './modules/movie-browser/movie-browser.reducers';\r\n\r\n// The root reducer will serve as the parent for all other reducers\r\n// We will add our module reducers to the root level here\r\nconst rootReducer = combineReducers({\r\n    movieBrowser: movieBrowserReducer\r\n});\r\n\r\n// Will log information about dispatched actions to the console\r\n// including the previous state, the action details, and the next state\r\nconst loggerMiddleware = createLogger();\r\n\r\nconst store = createStore(\r\n    // reducer\r\n    rootReducer,\r\n    // preloadedState\r\n    undefined,\r\n    // compose simply enables us to apply several store enhancers\r\n    // Right now, we are only using applyMiddlware, so this is\r\n    // just future-proofing our application\r\n    compose(\r\n        // Middlware can intercept dispatched actions before they reach the reducer\r\n        // in order to modify it in some way\r\n        applyMiddleware(\r\n            // Thunk allows functions to be returned from action creators\r\n            // so we can do things like dispatch multiple actions in a \r\n            // single action creator for async actions\r\n            thunkMiddlware,\r\n            // logger will output the previous state, next state, and\r\n            // the action details to the console\r\n            loggerMiddleware\r\n        )\r\n    )\r\n);\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}