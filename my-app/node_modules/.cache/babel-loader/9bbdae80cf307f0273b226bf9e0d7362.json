{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\bajdu\\\\Documents\\\\2na10\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { combineReducers } from 'redux';\nimport { createReducer, createAsyncReducer } from '../common/redux.helpers';\nimport { keys as movieActionKeys } from './movie-browser.actions'; // Placeholder reducer for our movie modal\n\nconst movieModalReducer = createReducer({\n  isOpen: false\n}, {}); // This will create a new state with both the existing \n// movies and new pages of movies\n\nconst moviesSuccessReducer = (state, action) => {\n  const existingMovies = state.response ? state.response.results : []; // Create a new state object to be returned\n  // When creating the new state, be sure to include any\n  // existing properties we want to persist\n\n  return _objectSpread({}, state, {\n    isLoading: false,\n    response: _objectSpread({}, action.response, {\n      results: [...existingMovies, ...action.response.results]\n    })\n  });\n}; // Combines our movie browser related reducers to build our movieBrowser reducer\n\n\nconst movieBrowserReducer = combineReducers({\n  movieModal: movieModalReducer,\n  topMovies: createAsyncReducer(movieActionKeys.GET_TOP_MOVIES, {\n    [\"\".concat(movieActionKeys.GET_TOP_MOVIES, \"_SUCCESS\")]: moviesSuccessReducer\n  }),\n  movieSearch: createAsyncReducer(movieActionKeys.SEARCH_MOVIES, {\n    [\"\".concat(movieActionKeys.SEARCH_MOVIES, \"_SUCCESS\")]: moviesSuccessReducer\n  }),\n  movieDetails: createAsyncReducer(movieActionKeys.GET_MOVIE_DETAILS)\n});\nexport default movieBrowserReducer;","map":{"version":3,"sources":["C:\\Users\\bajdu\\Documents\\2na10\\my-app\\src\\modules\\movie-browser\\movie-browser.reducers.js"],"names":["combineReducers","createReducer","createAsyncReducer","keys","movieActionKeys","movieModalReducer","isOpen","moviesSuccessReducer","state","action","existingMovies","response","results","isLoading","movieBrowserReducer","movieModal","topMovies","GET_TOP_MOVIES","movieSearch","SEARCH_MOVIES","movieDetails","GET_MOVIE_DETAILS"],"mappings":";AAAA,SACIA,eADJ,QAEO,OAFP;AAGA,SACIC,aADJ,EAEIC,kBAFJ,QAGO,yBAHP;AAIA,SACIC,IAAI,IAAIC,eADZ,QAEO,yBAFP,C,CAIA;;AACA,MAAMC,iBAAiB,GAAGJ,aAAa,CAAC;AACpCK,EAAAA,MAAM,EAAE;AAD4B,CAAD,EAEpC,EAFoC,CAAvC,C,CAMA;AACA;;AACA,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5C,QAAMC,cAAc,GAAGF,KAAK,CAACG,QAAN,GAAiBH,KAAK,CAACG,QAAN,CAAeC,OAAhC,GAA0C,EAAjE,CAD4C,CAE5C;AACA;AACA;;AACA,2BACOJ,KADP;AAEIK,IAAAA,SAAS,EAAE,KAFf;AAGIF,IAAAA,QAAQ,oBACDF,MAAM,CAACE,QADN;AAEJC,MAAAA,OAAO,EAAE,CACL,GAAGF,cADE,EAEL,GAAGD,MAAM,CAACE,QAAP,CAAgBC,OAFd;AAFL;AAHZ;AAWH,CAhBD,C,CAkBA;;;AACA,MAAME,mBAAmB,GAAGd,eAAe,CAAC;AACxCe,EAAAA,UAAU,EAAEV,iBAD4B;AAExCW,EAAAA,SAAS,EAAEd,kBAAkB,CAACE,eAAe,CAACa,cAAjB,EAAiC;AAC1D,eAAIb,eAAe,CAACa,cAApB,gBAA+CV;AADW,GAAjC,CAFW;AAKxCW,EAAAA,WAAW,EAAEhB,kBAAkB,CAACE,eAAe,CAACe,aAAjB,EAAgC;AAC3D,eAAIf,eAAe,CAACe,aAApB,gBAA8CZ;AADa,GAAhC,CALS;AAQxCa,EAAAA,YAAY,EAAElB,kBAAkB,CAACE,eAAe,CAACiB,iBAAjB;AARQ,CAAD,CAA3C;AAWA,eAAeP,mBAAf","sourcesContent":["import {\r\n    combineReducers\r\n} from 'redux';\r\nimport {\r\n    createReducer,\r\n    createAsyncReducer\r\n} from '../common/redux.helpers';\r\nimport {\r\n    keys as movieActionKeys\r\n} from './movie-browser.actions';\r\n\r\n// Placeholder reducer for our movie modal\r\nconst movieModalReducer = createReducer({\r\n    isOpen: false\r\n}, {\r\n\r\n});\r\n\r\n// This will create a new state with both the existing \r\n// movies and new pages of movies\r\nconst moviesSuccessReducer = (state, action) => {\r\n    const existingMovies = state.response ? state.response.results : [];\r\n    // Create a new state object to be returned\r\n    // When creating the new state, be sure to include any\r\n    // existing properties we want to persist\r\n    return {\r\n        ...state,\r\n        isLoading: false,\r\n        response: {\r\n            ...action.response,\r\n            results: [\r\n                ...existingMovies,\r\n                ...action.response.results\r\n            ]\r\n        }\r\n    };\r\n}\r\n\r\n// Combines our movie browser related reducers to build our movieBrowser reducer\r\nconst movieBrowserReducer = combineReducers({\r\n    movieModal: movieModalReducer,\r\n    topMovies: createAsyncReducer(movieActionKeys.GET_TOP_MOVIES, {\r\n        [`${movieActionKeys.GET_TOP_MOVIES}_SUCCESS`]: moviesSuccessReducer\r\n    }),\r\n    movieSearch: createAsyncReducer(movieActionKeys.SEARCH_MOVIES, {\r\n        [`${movieActionKeys.SEARCH_MOVIES}_SUCCESS`]: moviesSuccessReducer\r\n    }),\r\n    movieDetails: createAsyncReducer(movieActionKeys.GET_MOVIE_DETAILS),\r\n});\r\n\r\nexport default movieBrowserReducer;"]},"metadata":{},"sourceType":"module"}