{"ast":null,"code":"import _objectSpread from \"D:\\\\Programowanie\\\\CodersCamp\\\\dwana10\\\\2na10\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { combineReducers } from 'redux';\nimport { createReducer, createAsyncReducer } from '../common/redux.helpers';\nimport { keys as movieActionKeys } from './movie-browser.actions';\nimport movieModalReducer from './movie-modal/movie-modal.reducer'; // This will create a new state with both the existing \n// movies and new pages of movies\n\nconst moviesSuccessReducer = (state, action) => {\n  const existingMovies = state.response ? state.response.results : []; // Create a new state object to be returned\n  // When creating the new state, be sure to include any\n  // existing properties we want to persist\n\n  return _objectSpread({}, state, {\n    isLoading: false,\n    response: _objectSpread({}, action.response, {\n      results: [...existingMovies, ...action.response.results]\n    })\n  });\n}; // Combines our movie browser related reducers to build our movieBrowser reducer\n\n\nconst movieBrowserReducer = combineReducers({\n  movieModal: movieModalReducer,\n  topMovies: createAsyncReducer(movieActionKeys.GET_TOP_MOVIES, {\n    [\"\".concat(movieActionKeys.GET_TOP_MOVIES, \"_SUCCESS\")]: moviesSuccessReducer\n  }),\n  movieSearch: createAsyncReducer(movieActionKeys.SEARCH_MOVIES, {\n    [\"\".concat(movieActionKeys.SEARCH_MOVIES, \"_SUCCESS\")]: moviesSuccessReducer\n  }),\n  movieDetails: createAsyncReducer(movieActionKeys.GET_MOVIE_DETAILS)\n});\nexport default movieBrowserReducer;","map":{"version":3,"sources":["D:\\Programowanie\\CodersCamp\\dwana10\\2na10\\my-app\\src\\modules\\movie-browser\\movie-browser.reducers.js"],"names":["combineReducers","createReducer","createAsyncReducer","keys","movieActionKeys","movieModalReducer","moviesSuccessReducer","state","action","existingMovies","response","results","isLoading","movieBrowserReducer","movieModal","topMovies","GET_TOP_MOVIES","movieSearch","SEARCH_MOVIES","movieDetails","GET_MOVIE_DETAILS"],"mappings":";AAAA,SAAQA,eAAR,QAA8B,OAA9B;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,yBAAlD;AACA,SAASC,IAAI,IAAIC,eAAjB,QAAwC,yBAAxC;AACA,OAAOC,iBAAP,MAA8B,mCAA9B,C,CAEA;AACA;;AACA,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9C,QAAMC,cAAc,GAAGF,KAAK,CAACG,QAAN,GAAiBH,KAAK,CAACG,QAAN,CAAeC,OAAhC,GAA0C,EAAjE,CAD8C,CAE9C;AACA;AACA;;AACA,2BACKJ,KADL;AAEEK,IAAAA,SAAS,EAAE,KAFb;AAGEF,IAAAA,QAAQ,oBACHF,MAAM,CAACE,QADJ;AAENC,MAAAA,OAAO,EAAE,CACP,GAAGF,cADI,EAEP,GAAGD,MAAM,CAACE,QAAP,CAAgBC,OAFZ;AAFH;AAHV;AAWD,CAhBD,C,CAkBA;;;AACA,MAAME,mBAAmB,GAAGb,eAAe,CAAC;AAC1Cc,EAAAA,UAAU,EAAET,iBAD8B;AAE1CU,EAAAA,SAAS,EAAEb,kBAAkB,CAACE,eAAe,CAACY,cAAjB,EAAiC;AAC5D,eAAIZ,eAAe,CAACY,cAApB,gBAA+CV;AADa,GAAjC,CAFa;AAK1CW,EAAAA,WAAW,EAAEf,kBAAkB,CAACE,eAAe,CAACc,aAAjB,EAAgC;AAC7D,eAAId,eAAe,CAACc,aAApB,gBAA8CZ;AADe,GAAhC,CALW;AAQ1Ca,EAAAA,YAAY,EAAEjB,kBAAkB,CAACE,eAAe,CAACgB,iBAAjB;AARU,CAAD,CAA3C;AAWA,eAAeP,mBAAf","sourcesContent":["import {combineReducers} from 'redux';\r\nimport { createReducer, createAsyncReducer } from '../common/redux.helpers';\r\nimport { keys as movieActionKeys } from './movie-browser.actions';\r\nimport movieModalReducer from './movie-modal/movie-modal.reducer';\r\n\r\n// This will create a new state with both the existing \r\n// movies and new pages of movies\r\nconst moviesSuccessReducer = (state, action) => {\r\n  const existingMovies = state.response ? state.response.results : [];\r\n  // Create a new state object to be returned\r\n  // When creating the new state, be sure to include any\r\n  // existing properties we want to persist\r\n  return {\r\n    ...state,\r\n    isLoading: false,\r\n    response: {\r\n      ...action.response,\r\n      results: [\r\n        ...existingMovies,\r\n        ...action.response.results\r\n      ]\r\n    }\r\n  };\r\n}\r\n\r\n// Combines our movie browser related reducers to build our movieBrowser reducer\r\nconst movieBrowserReducer = combineReducers({\r\n  movieModal: movieModalReducer,\r\n  topMovies: createAsyncReducer(movieActionKeys.GET_TOP_MOVIES, {\r\n    [`${movieActionKeys.GET_TOP_MOVIES}_SUCCESS`]: moviesSuccessReducer\r\n  }),\r\n  movieSearch: createAsyncReducer(movieActionKeys.SEARCH_MOVIES, {\r\n    [`${movieActionKeys.SEARCH_MOVIES}_SUCCESS`]: moviesSuccessReducer\r\n  }),\r\n  movieDetails: createAsyncReducer(movieActionKeys.GET_MOVIE_DETAILS),\r\n});\r\n\r\nexport default movieBrowserReducer;\r\n "]},"metadata":{},"sourceType":"module"}