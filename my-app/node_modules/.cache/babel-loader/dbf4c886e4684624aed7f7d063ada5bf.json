{"ast":null,"code":"import _objectSpread from \"D:\\\\Programowanie\\\\CodersCamp\\\\dwana10\\\\2na10\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n// Helper function to enables passing an object with\n// the action.type as the key and the reducer function as the value\nexport const createReducer = (initialState = {}, actionHandlerKeyFuncs = {}) => {\n  return (state = initialState, action) => {\n    const actionHandler = actionHandlerKeyFuncs[action.type];\n    return actionHandler ? actionHandler(state, action) : state;\n  };\n}; // Creates a basic action\n\nexport const createAction = (type, actionProps) => {\n  return _objectSpread({\n    type\n  }, actionProps);\n}; // e.g. createAsyncActionCreator('GET_TOP_MOVIES', getTopMovies, {page: 1})\n// I admit that passing the asyncRequestFn without params is not ideal, but \n// wanted to capture the requestParams as part of the start action for logging transparency\n\nexport const createAsyncActionCreator = (actionType, asyncRequestFn, requestParams) => {\n  return dispatch => {\n    dispatch(createAction(\"\".concat(actionType, \"_START\"), {\n      request: requestParams\n    })); // NOTE: asyncRequestFn must accept single object parameter\n    // in order to resolve param values\n\n    return asyncRequestFn(requestParams).then(response => {\n      response.json().then(json => dispatch(createAction(\"\".concat(actionType, \"_SUCCESS\"), {\n        response: json\n      }))).catch(error => dispatch(createAction(\"\".concat(actionType, \"_ERROR\"), {\n        error\n      })));\n    });\n  };\n}; // We're setting these based on the state of the request\n\nconst initialAsyncState = {\n  isLoading: false,\n  response: undefined,\n  request: undefined\n}; // Generic way of handling state changes for an async request\n// Allowable async reducer overrides are: {action_type}_START, {action_type}_SUCCESS, {action_type}_ERROR\n\nexport const createAsyncReducer = (actionType, actionHandlerKeyFuncs = {}, initialState = initialAsyncState) => {\n  const startReducerOverrideFn = actionHandlerKeyFuncs[\"\".concat(actionType, \"_START\")];\n\n  const startReducerFn = (state, action) => _objectSpread({}, state, {\n    isLoading: true,\n    request: action.request\n  });\n\n  const successReducerOverrideFn = actionHandlerKeyFuncs[\"\".concat(actionType, \"_SUCCESS\")];\n  const successReducerFn = successReducerOverrideFn ? successReducerOverrideFn : (state, action) => _objectSpread({}, state, {\n    isLoading: false,\n    response: action.response\n  });\n  const errorReducerOverrideFn = actionHandlerKeyFuncs[\"\".concat(actionType, \"_ERROR\")];\n\n  const errorReducerFn = (state, action) => _objectSpread({}, state, {\n    isLoading: false,\n    error: action.error\n  });\n\n  return createReducer(initialState, {\n    [\"\".concat(actionType, \"_START\")]: startReducerFn,\n    [\"\".concat(actionType, \"_SUCCESS\")]: successReducerFn,\n    [\"\".concat(actionType, \"_ERROR\")]: errorReducerFn\n  });\n};","map":{"version":3,"sources":["D:\\Programowanie\\CodersCamp\\dwana10\\2na10\\my-app\\src\\modules\\common\\redux.helpers.js"],"names":["createReducer","initialState","actionHandlerKeyFuncs","state","action","actionHandler","type","createAction","actionProps","createAsyncActionCreator","actionType","asyncRequestFn","requestParams","dispatch","request","then","response","json","catch","error","initialAsyncState","isLoading","undefined","createAsyncReducer","startReducerOverrideFn","startReducerFn","successReducerOverrideFn","successReducerFn","errorReducerOverrideFn","errorReducerFn"],"mappings":";AAAA;AACA;AACA,OAAO,MAAMA,aAAa,GAAG,CAACC,YAAY,GAAG,EAAhB,EAAoBC,qBAAqB,GAAG,EAA5C,KAAmD;AAC9E,SAAO,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AACvC,UAAMC,aAAa,GAAGH,qBAAqB,CAACE,MAAM,CAACE,IAAR,CAA3C;AACA,WAAOD,aAAa,GAAGA,aAAa,CAACF,KAAD,EAAQC,MAAR,CAAhB,GAAkCD,KAAtD;AACD,GAHD;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMI,YAAY,GAAG,CAACD,IAAD,EAAOE,WAAP,KAAuB;AACjD;AACEF,IAAAA;AADF,KAEKE,WAFL;AAID,CALM,C,CAOP;AACA;AACA;;AACA,OAAO,MAAMC,wBAAwB,GAAG,CAACC,UAAD,EAAaC,cAAb,EAA6BC,aAA7B,KAA+C;AACrF,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACN,YAAY,WAAIG,UAAJ,aAAwB;AAACI,MAAAA,OAAO,EAAEF;AAAV,KAAxB,CAAb,CAAR,CADmB,CAEnB;AACA;;AACA,WAAOD,cAAc,CAACC,aAAD,CAAd,CACJG,IADI,CACCC,QAAQ,IAAI;AAChBA,MAAAA,QAAQ,CAACC,IAAT,GACGF,IADH,CACQE,IAAI,IAAIJ,QAAQ,CAACN,YAAY,WAAIG,UAAJ,eAA0B;AAAEM,QAAAA,QAAQ,EAAEC;AAAZ,OAA1B,CAAb,CADxB,EAEGC,KAFH,CAESC,KAAK,IAAIN,QAAQ,CAACN,YAAY,WAAIG,UAAJ,aAAwB;AAAES,QAAAA;AAAF,OAAxB,CAAb,CAF1B;AAGD,KALI,CAAP;AAOD,GAXD;AAYD,CAbM,C,CAeP;;AACA,MAAMC,iBAAiB,GAAG;AAAEC,EAAAA,SAAS,EAAE,KAAb;AAAoBL,EAAAA,QAAQ,EAAEM,SAA9B;AAAyCR,EAAAA,OAAO,EAAEQ;AAAlD,CAA1B,C,CAEA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACb,UAAD,EAAaR,qBAAqB,GAAG,EAArC,EAAyCD,YAAY,GAAGmB,iBAAxD,KAA8E;AAC9G,QAAMI,sBAAsB,GAAGtB,qBAAqB,WAAIQ,UAAJ,YAApD;;AACA,QAAMe,cAAc,GAAG,CAACtB,KAAD,EAAQC,MAAR,uBAChBD,KADgB;AAEnBkB,IAAAA,SAAS,EAAE,IAFQ;AAGnBP,IAAAA,OAAO,EAAEV,MAAM,CAACU;AAHG,IAAvB;;AAKA,QAAMY,wBAAwB,GAAGxB,qBAAqB,WAAIQ,UAAJ,cAAtD;AACA,QAAMiB,gBAAgB,GAAGD,wBAAwB,GAAGA,wBAAH,GAA8B,CAACvB,KAAD,EAAQC,MAAR,uBACxED,KADwE;AAE3EkB,IAAAA,SAAS,EAAE,KAFgE;AAG3EL,IAAAA,QAAQ,EAAEZ,MAAM,CAACY;AAH0D,IAA/E;AAKA,QAAMY,sBAAsB,GAAG1B,qBAAqB,WAAIQ,UAAJ,YAApD;;AACA,QAAMmB,cAAc,GAAG,CAAC1B,KAAD,EAAQC,MAAR,uBAChBD,KADgB;AAEnBkB,IAAAA,SAAS,EAAE,KAFQ;AAGnBF,IAAAA,KAAK,EAAEf,MAAM,CAACe;AAHK,IAAvB;;AAMA,SAAOnB,aAAa,CAClBC,YADkB,EAElB;AACE,eAAIS,UAAJ,cAAyBe,cAD3B;AAEE,eAAIf,UAAJ,gBAA2BiB,gBAF7B;AAGE,eAAIjB,UAAJ,cAAyBmB;AAH3B,GAFkB,CAApB;AAQD,CA5BM","sourcesContent":["// Helper function to enables passing an object with\r\n// the action.type as the key and the reducer function as the value\r\nexport const createReducer = (initialState = {}, actionHandlerKeyFuncs = {}) => {\r\n  return (state = initialState, action) => {\r\n    const actionHandler = actionHandlerKeyFuncs[action.type];\r\n    return actionHandler ? actionHandler(state, action) : state;\r\n  }\r\n};\r\n\r\n// Creates a basic action\r\nexport const createAction = (type, actionProps) => {\r\n  return {\r\n    type,\r\n    ...actionProps\r\n  };\r\n}\r\n \r\n// e.g. createAsyncActionCreator('GET_TOP_MOVIES', getTopMovies, {page: 1})\r\n// I admit that passing the asyncRequestFn without params is not ideal, but \r\n// wanted to capture the requestParams as part of the start action for logging transparency\r\nexport const createAsyncActionCreator = (actionType, asyncRequestFn, requestParams) => {\r\n  return (dispatch) => {\r\n    dispatch(createAction(`${actionType}_START`, {request: requestParams}));\r\n    // NOTE: asyncRequestFn must accept single object parameter\r\n    // in order to resolve param values\r\n    return asyncRequestFn(requestParams)\r\n      .then(response => {\r\n        response.json()\r\n          .then(json => dispatch(createAction(`${actionType}_SUCCESS`, { response: json })))\r\n          .catch(error => dispatch(createAction(`${actionType}_ERROR`, { error })));\r\n      });\r\n      \r\n  };\r\n}\r\n\r\n// We're setting these based on the state of the request\r\nconst initialAsyncState = { isLoading: false, response: undefined, request: undefined };\r\n\r\n// Generic way of handling state changes for an async request\r\n// Allowable async reducer overrides are: {action_type}_START, {action_type}_SUCCESS, {action_type}_ERROR\r\nexport const createAsyncReducer = (actionType, actionHandlerKeyFuncs = {}, initialState = initialAsyncState) => {\r\n  const startReducerOverrideFn = actionHandlerKeyFuncs[`${actionType}_START`];\r\n  const startReducerFn = (state, action) => ({\r\n      ...state,\r\n      isLoading: true,\r\n      request: action.request\r\n  });\r\n  const successReducerOverrideFn = actionHandlerKeyFuncs[`${actionType}_SUCCESS`];\r\n  const successReducerFn = successReducerOverrideFn ? successReducerOverrideFn : (state, action) => ({\r\n      ...state,\r\n      isLoading: false,\r\n      response: action.response\r\n  });\r\n  const errorReducerOverrideFn = actionHandlerKeyFuncs[`${actionType}_ERROR`];\r\n  const errorReducerFn = (state, action) => ({\r\n      ...state,\r\n      isLoading: false,\r\n      error: action.error\r\n  });\r\n\r\n  return createReducer(\r\n    initialState,\r\n    {\r\n      [`${actionType}_START`]: startReducerFn,\r\n      [`${actionType}_SUCCESS`]: successReducerFn,\r\n      [`${actionType}_ERROR`]: errorReducerFn\r\n    }\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}