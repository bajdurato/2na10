{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bajdu\\\\Documents\\\\2na10\\\\my-app\\\\src\\\\modules\\\\movie-browser\\\\movie-modal\\\\movie-modal.container.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Dialog } from 'material-ui';\nimport _ from 'lodash';\nimport { closeMovieModal } from './movie-modal.actions';\nimport { getMovieDetails } from '../movie-browser.actions';\nimport * as movieHelpers from '../movie-browser.helpers';\nimport Loader from '../../common/loader.component';\nconst styles = {\n  // Can use functions to dynamically build our CSS\n  dialogContent: backgroundUrl => ({\n    backgroundImage: \"linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(\".concat(backgroundUrl, \")\"),\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '100%',\n    height: '100%',\n    minHeight: 400,\n    color: 'white',\n    padding: 10\n  })\n};\n\nclass MovieModalContainer extends React.Component {\n  // Triggered right after a property is changed\n  componentWillReceiveProps(nextProps) {\n    // If we will receive a new movieId\n    if (nextProps.movieId && this.props.movieId !== nextProps.movieId) {\n      nextProps.getMovieDetails(nextProps.movieId);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          closeMovieModal = _this$props.closeMovieModal,\n          isLoading = _this$props.isLoading;\n    const loadingStatus = isLoading ? 'loading' : 'hide';\n    const movie = movieHelpers.updateMoviePictureUrls(this.props.movie);\n    const genres = movie && movie.genres ? movie.genres.map(genre => genre.name).join(', ') : '';\n    return React.createElement(Dialog, {\n      autoScrollBodyContent: true,\n      title: null,\n      modal: false,\n      open: isOpen,\n      onRequestClose: closeMovieModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      isLoading: isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles.dialogContent(movie.backdrop_path),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \" \", movie.title, \" \"), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \" \", genres, \" \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \" \", movie.overview, \" \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \" Popularity: \", movie.popularity, \" \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \" Budget: $ \", movie.budget, \" \"))));\n  }\n\n} // \"connect\" our movie modal to the component store\n\n\nexport default connect( // Map nodes in our state to a properties of our component\nstate => ({\n  // Using lodash get, recursively check that a property is defined\n  // before try to access it - if it is undefined, it will return your default value\n  // _.get(object, 'path.to.targets[0].neat.stuff', defaultValue)\n  isOpen: _.get(state, 'movieBrowser.movieModal.isOpen', false),\n  movieId: _.get(state, 'movieBrowser.movieModal.movieId'),\n  movie: _.get(state, 'movieBrowser.movieDetails.response', {}),\n  isLoading: _.get(state, 'movieBrowser.movieDetails.isLoading', false)\n}), // Map an action to a prop, ready to be dispatched\n{\n  closeMovieModal,\n  getMovieDetails\n})(MovieModalContainer);","map":{"version":3,"sources":["C:\\Users\\bajdu\\Documents\\2na10\\my-app\\src\\modules\\movie-browser\\movie-modal\\movie-modal.container.js"],"names":["React","connect","Dialog","_","closeMovieModal","getMovieDetails","movieHelpers","Loader","styles","dialogContent","backgroundUrl","backgroundImage","backgroundRepeat","backgroundSize","height","minHeight","color","padding","MovieModalContainer","Component","componentWillReceiveProps","nextProps","movieId","props","render","isOpen","isLoading","loadingStatus","movie","updateMoviePictureUrls","genres","map","genre","name","join","backdrop_path","title","overview","popularity","budget","state","get"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,OADJ,QAEO,aAFP;AAGA,SACIC,MADJ,QAEO,aAFP;AAGA,OAAOC,CAAP,MAAc,QAAd;AACA,SACIC,eADJ,QAEO,uBAFP;AAGA,SACIC,eADJ,QAEO,0BAFP;AAGA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,MAAMC,MAAM,GAAG;AACX;AACAC,EAAAA,aAAa,EAAGC,aAAD,KAAoB;AAC/BC,IAAAA,eAAe,yEAAkED,aAAlE,MADgB;AAE/BE,IAAAA,gBAAgB,EAAE,WAFa;AAG/BC,IAAAA,cAAc,EAAE,MAHe;AAI/BC,IAAAA,MAAM,EAAE,MAJuB;AAK/BC,IAAAA,SAAS,EAAE,GALoB;AAM/BC,IAAAA,KAAK,EAAE,OANwB;AAO/BC,IAAAA,OAAO,EAAE;AAPsB,GAApB;AAFJ,CAAf;;AAaA,MAAMC,mBAAN,SAAkClB,KAAK,CAACmB,SAAxC,CAAkD;AAC9C;AACAC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACjC;AACA,QAAIA,SAAS,CAACC,OAAV,IAAqB,KAAKC,KAAL,CAAWD,OAAX,KAAuBD,SAAS,CAACC,OAA1D,EAAmE;AAC/DD,MAAAA,SAAS,CAAChB,eAAV,CAA0BgB,SAAS,CAACC,OAApC;AACH;AACJ;;AAEDE,EAAAA,MAAM,GAAG;AAAA,wBAKD,KAAKD,KALJ;AAAA,UAEDE,MAFC,eAEDA,MAFC;AAAA,UAGDrB,eAHC,eAGDA,eAHC;AAAA,UAIDsB,SAJC,eAIDA,SAJC;AAML,UAAMC,aAAa,GAAGD,SAAS,GAAG,SAAH,GAAe,MAA9C;AACA,UAAME,KAAK,GAAGtB,YAAY,CAACuB,sBAAb,CAAoC,KAAKN,KAAL,CAAWK,KAA/C,CAAd;AACA,UAAME,MAAM,GAAIF,KAAK,IAAIA,KAAK,CAACE,MAAhB,GAA0BF,KAAK,CAACE,MAAN,CAAaC,GAAb,CAAiBC,KAAK,IAAIA,KAAK,CAACC,IAAhC,EAAsCC,IAAtC,CAA2C,IAA3C,CAA1B,GAA6E,EAA5F;AAEA,WAAS,oBAAC,MAAD;AAAQ,MAAA,qBAAqB,EAC9B,IADC;AAEH,MAAA,KAAK,EACH,IAHC;AAKL,MAAA,KAAK,EACD,KANC;AAQL,MAAA,IAAI,EACAT,MATC;AAWL,MAAA,cAAc,EACVrB,eAZC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAcL,oBAAC,MAAD;AAAQ,MAAA,SAAS,EACbsB,SADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGA;AAAK,MAAA,KAAK,EACNlB,MAAM,CAACC,aAAP,CAAqBmB,KAAK,CAACO,aAA3B,CADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACIP,KAAK,CAACQ,KADV,MAHA,EAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACIN,MADJ,MANA,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACIF,KAAK,CAACS,QADV,MATA,EAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACIT,KAAK,CAACU,UADV,MAZA,EAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACIV,KAAK,CAACW,MADV,MAfA,CAHA,CAdK,CAAT;AAuCH;;AA1D6C,C,CA4DlD;;;AACA,eAAetC,OAAO,EAClB;AACCuC,KAAD,KAAY;AACR;AACA;AACA;AACAf,EAAAA,MAAM,EAAEtB,CAAC,CAACsC,GAAF,CAAMD,KAAN,EAAa,gCAAb,EAA+C,KAA/C,CAJA;AAKRlB,EAAAA,OAAO,EAAEnB,CAAC,CAACsC,GAAF,CAAMD,KAAN,EAAa,iCAAb,CALD;AAMRZ,EAAAA,KAAK,EAAEzB,CAAC,CAACsC,GAAF,CAAMD,KAAN,EAAa,oCAAb,EAAmD,EAAnD,CANC;AAORd,EAAAA,SAAS,EAAEvB,CAAC,CAACsC,GAAF,CAAMD,KAAN,EAAa,qCAAb,EAAoD,KAApD;AAPH,CAAZ,CAFkB,EAWlB;AACA;AACIpC,EAAAA,eADJ;AAEIC,EAAAA;AAFJ,CAZkB,CAAP,CAgBba,mBAhBa,CAAf","sourcesContent":["import React from 'react';\r\nimport {\r\n    connect\r\n} from 'react-redux';\r\nimport {\r\n    Dialog\r\n} from 'material-ui';\r\nimport _ from 'lodash';\r\nimport {\r\n    closeMovieModal\r\n} from './movie-modal.actions';\r\nimport {\r\n    getMovieDetails\r\n} from '../movie-browser.actions';\r\nimport * as movieHelpers from '../movie-browser.helpers';\r\nimport Loader from '../../common/loader.component';\r\n\r\nconst styles = {\r\n    // Can use functions to dynamically build our CSS\r\n    dialogContent: (backgroundUrl) => ({\r\n        backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(${backgroundUrl})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100%',\r\n        height: '100%',\r\n        minHeight: 400,\r\n        color: 'white',\r\n        padding: 10\r\n    })\r\n}\r\n\r\nclass MovieModalContainer extends React.Component {\r\n    // Triggered right after a property is changed\r\n    componentWillReceiveProps(nextProps) {\r\n        // If we will receive a new movieId\r\n        if (nextProps.movieId && this.props.movieId !== nextProps.movieId) {\r\n            nextProps.getMovieDetails(nextProps.movieId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            isOpen,\r\n            closeMovieModal,\r\n            isLoading\r\n        } = this.props;\r\n        const loadingStatus = isLoading ? 'loading' : 'hide';\r\n        const movie = movieHelpers.updateMoviePictureUrls(this.props.movie);\r\n        const genres = (movie && movie.genres) ? movie.genres.map(genre => genre.name).join(', ') : '';\r\n\r\n        return ( <Dialog autoScrollBodyContent = {\r\n                true\r\n            } title = {\r\n                null\r\n            }\r\n            modal = {\r\n                false\r\n            }\r\n            open = {\r\n                isOpen\r\n            }\r\n            onRequestClose = {\r\n                closeMovieModal\r\n            } >\r\n            <Loader isLoading = {\r\n                isLoading\r\n            }>\r\n            <div style = {\r\n                styles.dialogContent(movie.backdrop_path)\r\n            }>\r\n            <h1> {\r\n                movie.title\r\n            } </h1> \r\n            <h5> {\r\n                genres\r\n            } </h5> \r\n            <p> {\r\n                movie.overview\r\n            } </p> \r\n            <p> Popularity: {\r\n                movie.popularity\r\n            } </p> \r\n            <p> Budget: $ {\r\n                movie.budget\r\n            } </p> \r\n            </div> \r\n            </Loader> \r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n// \"connect\" our movie modal to the component store\r\nexport default connect(\r\n    // Map nodes in our state to a properties of our component\r\n    (state) => ({\r\n        // Using lodash get, recursively check that a property is defined\r\n        // before try to access it - if it is undefined, it will return your default value\r\n        // _.get(object, 'path.to.targets[0].neat.stuff', defaultValue)\r\n        isOpen: _.get(state, 'movieBrowser.movieModal.isOpen', false),\r\n        movieId: _.get(state, 'movieBrowser.movieModal.movieId'),\r\n        movie: _.get(state, 'movieBrowser.movieDetails.response', {}),\r\n        isLoading: _.get(state, 'movieBrowser.movieDetails.isLoading', false),\r\n    }),\r\n    // Map an action to a prop, ready to be dispatched\r\n    {\r\n        closeMovieModal,\r\n        getMovieDetails\r\n    }\r\n)(MovieModalContainer);"]},"metadata":{},"sourceType":"module"}